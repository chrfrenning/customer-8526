# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- '*'

pool:
  vmImage: 'ubuntu-16.04' # examples of other options: 'macOS-10.13', 'vs2017-win2016'

steps:
# Select correct dotnet version
- task: UseDotNet@2
  displayName: 'Setting .NET Env'
  inputs:
    version: '3.0.x'
# Build and deploy web front end part of the app
- task: DotNetCoreCLI@2
  displayName: Build WebFrontEnd
  inputs:
    command: build
    projects: 'WebFrontEnd/*.csproj'
    arguments: '--configuration Release'
# Publish all projects
- task: DotNetCoreCLI@2
  displayName: 'Publish WebFrontEnd'
  inputs:
    command: publish
    projects: 'WebFrontEnd/*.csproj'
    publishWebProjects: True
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
#Create infrastructure artifact
- task: ArchiveFiles@2
  displayName: 'Package ARM templates'
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/Infrastructure/*.json'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Infrastructure.zip'
    replaceExistingArchive: true
#Create infrastructure artifact 2
- task: ArchiveFiles@2
  displayName: 'Package PS Script'
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/Infrastructure/*.ps1'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Infrastructure.zip'
    replaceExistingArchive: false
# This code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  displayName: 'Create artifact'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'WebFrontEnd'
